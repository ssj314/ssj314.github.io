<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://localhost:4000/</id><title>내 블로그</title><subtitle></subtitle> <updated>2024-03-27T19:08:45+09:00</updated> <author> <name>Sangjun Song</name> <uri>http://localhost:4000/</uri> </author><link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="http://localhost:4000/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Sangjun Song </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>생성 모델</title><link href="http://localhost:4000/posts/Generative-Model/" rel="alternate" type="text/html" title="생성 모델" /><published>2024-03-26T00:00:00+09:00</published> <updated>2024-03-26T00:00:00+09:00</updated> <id>http://localhost:4000/posts/Generative-Model/</id> <content src="http://localhost:4000/posts/Generative-Model/" /> <author> <name>Sangjun Song</name> </author> <category term="Deep Learning" /> <category term="Generative Model" /> <summary> 기존 딥러닝 모델은 데이터를 학습하여 정답을 찾는 것이었다. 그러나, 생성 모델은 데이터를 판별하는 것에 그치지 않는다. 입력 데이터의 분포를 파악하여 유사한 데이터를 생성해 낼 수 있다. 최근엔 엄청나게 많은 데이터를 학습하는 것이 추세이므로 생성 모델을 이용해 입력 데이터를 생성해 내기도 한다. 생성 모델의 구조 신경망처럼 분류 혹은 회귀 모델은 판별자 모델이라고 한다. 생성 모델에는 판별자뿐 아니라 기존 데이터의 특성을 추출해 새로운 조합을 만드는 생성자 모델이 있다. 생성 모델의 유형 기존 데이터의 특성을 추출하는 방식에 따라 명시적 방법과 암시적 방법으로 분류한다. 명시적 방법의 대표적인 예시는 변형 오토인코더(VAE)로, 확률 변수 $p(x)$를 정의한다. 반면, 암시적 방법에 해당하는... </summary> </entry> <entry><title>Quadratic form</title><link href="http://localhost:4000/posts/Quadratic-form/" rel="alternate" type="text/html" title="Quadratic form" /><published>2024-03-22T00:00:00+09:00</published> <updated>2024-03-22T00:00:00+09:00</updated> <id>http://localhost:4000/posts/Quadratic-form/</id> <content src="http://localhost:4000/posts/Quadratic-form/" /> <author> <name>Sangjun Song</name> </author> <category term="볼록최적화입문" /> <category term="Chapter 3" /> <summary> 지난 게시물에서 벡터 공간과 고유 벡터에 대해서 배웠다. 이번 포스팅에서는 Quadratic form(이차 형식)에 대해서 알아볼 것이다. Quadratic Form이란? 선형 대수학에서 이차 항만 존재하는 다항식을 Quadratic Form이라 한다. $x \in \mathbb{R}$일 때, 함수 $f(x) = ax^2$는 대표적인 이차 형식이다. 이차 형식을 벡터 차원으로 확장할 수 있다. $x \in \mathbb{R}^n$인 벡터에 대해 이차 형식은 다음과 같이 정의한다. \[f(x)=x^TAx\] 이 때, 행렬 $A$는 Symmetric이다. 왜 대칭 행렬을 쓰는 지는 뒤에서 배우겠다. 예시 1 벡터 $x=(x_1, x_2)$와 행렬 \(A=\begin{bmatrix} 4 &amp;amp;... </summary> </entry> <entry><title>Convex Set (2)</title><link href="http://localhost:4000/posts/Convex-Set-(2)/" rel="alternate" type="text/html" title="Convex Set (2)" /><published>2024-03-16T00:00:00+09:00</published> <updated>2024-03-16T00:00:00+09:00</updated> <id>http://localhost:4000/posts/Convex-Set-(2)/</id> <content src="http://localhost:4000/posts/Convex-Set-(2)/" /> <author> <name>Sangjun Song</name> </author> <category term="볼록최적화입문" /> <category term="Chapter 2" /> <summary> 벡터의 비교 일반적으로 벡터끼리는 부등호를 통해 비교할 수 없다. 그러나, 성분끼리 비교하여 모두 특정한 조건이 성립한다면 부등호를 이용할 수 있도록 할 것이다. \(x \leq y \iff \forall_{1\leq i\leq n} \; (x_i \leq y_i)\) 단, 하나의 성분이라도 조건을 만족하지 않는다면 부등호를 통해 비교할 수 없다. Positive Definite Matrices 벡터와 마찬가지로 행렬도 특별한 방법을 이용하여 부호를 따질 수 있다. 대칭 행렬 $A \in \mathcal{S}^{n}$와 벡터 $x \in \mathbb{R}^n$가 있을 때, $x^TAx &amp;gt; 0$를 만족한다면 이 행렬을 Positvie Definite Matrix라고 한다 (단, $x \ne... </summary> </entry> <entry><title>Convex Set (1)</title><link href="http://localhost:4000/posts/Convex-Set-(1)/" rel="alternate" type="text/html" title="Convex Set (1)" /><published>2024-03-16T00:00:00+09:00</published> <updated>2024-03-16T00:00:00+09:00</updated> <id>http://localhost:4000/posts/Convex-Set-(1)/</id> <content src="http://localhost:4000/posts/Convex-Set-(1)/" /> <author> <name>Sangjun Song</name> </author> <category term="볼록최적화입문" /> <category term="Chapter 2" /> <summary> Convex 집합은 임의의 두 점을 꺼내 선분을 그었을 때 선분 위에 존재하는 모든 점을 포함하는 집합을 말한다. Convex 집합이 중요한 이유는 볼록 최적화를 이해하는데 기본이 되는 개념이기 때문이다. 우선 기초가 되는 Affine 집합부터 알아보자. Affine Set 집합 $\mathcal{A}\in R^n$에 속한 두 점 $x_1, \; x_2$를 꺼내 직선을 그었을 때 직선 위 모든 점이 이 집합에 속한다면 Affine 집합이다. \[\theta x_1 + (1-\theta) x_2 \in \mathcal{A}\] Affine Combination Affine 결합은 계수의 합이 1인 특수한 선형 결합이다. 귀납법을 통해 Affine 집합은 항상 원소의 모든 Affine 결합을 포함한다... </summary> </entry> <entry><title>5. GitHub 연동하기</title><link href="http://localhost:4000/posts/5.-Syncing-with-Github/" rel="alternate" type="text/html" title="5. GitHub 연동하기" /><published>2024-03-10T00:00:00+09:00</published> <updated>2024-03-10T00:00:00+09:00</updated> <id>http://localhost:4000/posts/5.-Syncing-with-Github/</id> <content src="http://localhost:4000/posts/5.-Syncing-with-Github/" /> <author> <name>Sangjun Song</name> </author> <category term="Dev" /> <category term="Git" /> <summary> Git은 로컬 저장소에서 버젼을 관리하는 프로그램이다. 그런데, 협업을 해야 되서 버젼 관리를 공유해야 할 땐 어떻게 해야 할까? 이 떄 사용하는 것이 GitHub같은 온라인 저장소다. 원격 저장소에 올리기 우리가 로컬 환경에서 열심히 개발을 해서 여러 개의 커밋을 생성하였다고 가정하자. 이제 GitHub 저장소에 올려 다른 사람들과 공유하고 싶다. 이 때, push 명령어를 이용한다. git push {repo_addr} main 그런데, 매 번 주소를 입력하는 것은 매우 번거롭다. 따라서, 변수에 저장하여 다음 번부터는 더 이상 입력하지 않도록 할 수 있다. 그러면 이제 주소를 작성할 필요 없이 git push만으로 올릴 수 있다. git remote add origin {repo_addr}... </summary> </entry> </feed>